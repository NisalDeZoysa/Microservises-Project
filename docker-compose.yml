version: '3.8'

services:
  # Kafka Infrastructure
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9094:9094"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_READONLY=false
      - KAFKA_CLUSTERS_0_TOPIC_AUTO_CREATE=true
    ports:
      - "9090:8080"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservices-network

  # MongoDB (for order service)
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: microservices
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  login-service:
    build:
      context: ./services/login-service
      dockerfile: Dockerfile
    container_name: login-service
    ports:
      - "7001:7001"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
      - MONGODB_URI=mongodb://root:password@mongodb:27017/microservices?authSource=admin
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  email-service:
    build:
      context: ./services/email-service
      dockerfile: Dockerfile
    container_name: email-service
    ports:
      - "8003:8003"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
      - EMAIL_USER=nisalzoysa2001@gmail.com
      - EMAIL_PASS=dvwe axbp djfi lvxn
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  analytics-service:
    build:
      context: ./services/analytic-service
      dockerfile: Dockerfile
    container_name: analytics-service
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # Frontend
  client2:
    build:
      context: ./services/client2
      dockerfile: Dockerfile
    container_name: client2
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_LOGIN_SERVICE_URL=http://localhost:7001
      - NEXT_PUBLIC_PAYMENT_SERVICE_URL=http://localhost:8001
      - NEXT_PUBLIC_ANALYTICS_SERVICE_URL=http://localhost:8000
    depends_on:
      - login-service
      - payment-service
      - analytics-service
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  mongodb_data:
