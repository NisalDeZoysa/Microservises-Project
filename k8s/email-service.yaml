---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: email-service
  namespace: microservices
  labels:
    app: email-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: email-service
  template:
    metadata:
      labels:
        app: email-service
    spec:
      containers:
      - name: email-service
        image: email-service:latest
        imagePullPolicy: Never  # For local development
        ports:
        - containerPort: 8003
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: NODE_ENV
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: KAFKA_BROKERS
        - name: EMAIL_USER
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: EMAIL_USER
        - name: EMAIL_PASS
          valueFrom:
            configMapKeyRef:
              name: microservices-config
              key: EMAIL_PASS
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - node
            - -e
            - console.log('Email service health check passed')
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - node
            - -e
            - console.log('Email service health check passed')
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: email-service
  namespace: microservices
  labels:
    app: email-service
spec:
  selector:
    app: email-service
  ports:
  - port: 8003
    targetPort: 8003
  type: ClusterIP
